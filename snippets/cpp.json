{
	"Simple Boilerplate": {
	"prefix": "/simple",
	"body": [
		"#include <bits/stdc++.h>\r",		
		"using namespace std;\r",
		"\r",
		"int main(){\r",
		"\t$0",
		"\treturn 0;",
		"}"
	],
	"description": "Simple Boilerplate"
	},
	"Basic snippet without testcase": {
	"prefix": "/cpw",
	"body": [
		"#include <bits/stdc++.h>\r",
		"#define ll long long\r",
		"#define endl \"\\n\"\r",			
		"using namespace std;\r",
		"\r",
		"void solve(){",
		"\t$0",
		"}\r",
		"\r",
		"int main(){\r",
		"\tios_base::sync_with_stdio(false); cin.tie(NULL);\r",
		"\tsolve();\r",
		"}"
	],
	"description": "Basic snippet without testcase"
	},
	"Basic snippet with testcase": {
	"prefix": "/cpt",
	"body": [
		"#include <bits/stdc++.h>\r",
		"#define ll long long\r",
		"#define endl \"\\n\"\r",			
		"using namespace std;\r",
		"\r",
		"void solve(){",
		"\t$0",
		"}\r",
		"\r",
		"int main(){\r",
		"\tios_base::sync_with_stdio(false); cin.tie(NULL);\r",
		"\tint tc=1;\r",
		"\tcin>>tc;\r",
		"\twhile(tc--) solve();\r",
		"}"
	],
	"description": "Basic snippet with testcase"
	},
	"for loop (press tab to go next)": {
		"prefix": "/for",
		"body": [
			"for(int ${1:i}=${2:0};${1:i}<${3:n};${1:i}++){",
			"\t$0",
			"}"
		],
		"description": "for loop (press tab to go next)"
	},
	"Reverse for loop": {
		"prefix": "/forr",
		"body": [
			"for(int ${1:i}=${2:n}-1;${1:i}>=${3:0};${1:i}--){",
			"\t$0",
			"}"
		],
		"description": "Reverse for loop"
	},
	"while(){}": {
		"prefix": "/forr",
		"body": [
			"while($1){",
			"\t$0",
			"}"
		],
		"description": "while(){}"
	},
	"cin>>x (change x);": {
		"prefix": "/cin",
		"body": [
			"cin>>${1:x};\r$0"
		],
		"description": "cin>>x (change x);"
	},
	"Declare and input n": {
		"prefix": "/n",
		"body": [
			"int n; cin>>n;\r$0"
		],
		"description": "Declare and input n"
	},
	"Declare and input 1 variable": {
		"prefix": "/in1",
		"body": [
			"${1:int} ${2:x}; cin>>${2:x};\r$0"
		],
		"description": "Declare and input 1 variable"
	},
	"Declare and input 2 variable": {
		"prefix": "/in2",
		"body": [
			"${1:int} ${2:x},${3:y}; cin>>${2:x}>>${3:y};\r$0"
		],
		"description": "Declare and input 2 variable"
	},
	"Declare and input 3 variable": {
		"prefix": "/in3",
		"body": [
			"${1:int} ${2:x},${3:y},${4:z}; cin>>${2:x}>>${3:y}>>${4:z};\r$0"
		],
		"description": "Declare and input 3 variable"
	},
	"New line": {
		"prefix": "/nl",
		"body": [
			"cout<<endl;$0"
		],
		"description": "New line"
	},
	"cout 1 with space (best for array print)": {
		"prefix": "/outs",
		"body": [
			"cout<<${1:x}<<\" \";$0"
		],
		"description": "cout one with space"
	},
	"cout 1 variable": {
		"prefix": "/out1",
		"body": [
			"cout<<${1:x}<<endl;$0"
		],
		"description": "cout 1 variable"
	},
	"cout 2 variable": {
		"prefix": "/out2",
		"body": [
			"cout<<${1:x}<<\" \"<<${2:y}<<endl;$0"
		],
		"description": "cout 2 variable"
	},
	"n size vector declare and input": {
		"prefix": "/vn",
		"body": [
			"vector<${1:ll}>v(n);",
			"for(int i=0;i<n;i++){",
			"\tcin>>v[i];$2",
			"}$0"
		],
		"description": "n size vector declare and input"
	},
	"vector (change data type and name)": {
		"prefix": "/vector",
		"body": [
			"vector<${1:int}>${2:v};$0"
		],
		"description": "Vector"
	},
	"pair": {
		"prefix": "/pair",
		"body": [
			"pair<${1:int},${2:int}>;$0"
		],
		"description": "Pair"
	},
	"map (change data type and name)": {
		"prefix": "/map",
		"body": [
			"map<${1:int},${2:int}>${3:mp};$0"
		],
		"description": "Map"
	},
	"set (change data type and name)": {
		"prefix": "/set",
		"body": [
			"vector<${1:int}>${2:st};$0"
		],
		"description": "set"
	},
	"if(){}": {
		"prefix": "/if",
		"body": [
			"if($1){",
			"\t$0",
			"}"
		],
		"description": "if(){}"
	},
	"else if(){}": {
		"prefix": "/elif",
		"body": [
			"else if($1){",
			"\t$0",
			"}"
		],
		"description": "else if(){}"
	},
	"else{}": {
		"prefix": "/else",
		"body": [
			"else{",
			"\t$0",
			"}"
		],
		"description": "else{}"
	},
	"singly linked list node": {
		"prefix": "/singly",
		"body": [
			"class Node{\r",
			"   public:\r",
			"      int val;\r",
			"      Node *next;\r",
			"   Node(int val){\r",
			"      this->val=val;\r",
			"      this->next=NULL;\r",
			"   }\r",
			"};"
		],
		"description": "singly linked list node"
	},
	"doubly linked list node": {
		"prefix": "/doubly",
		"body": [
			"class Node{\r",
			"   public:\r",
			"      int val;\r",
			"      Node *next;\r",
			"      Node *prev;\r",
			"   Node(int val){\r",
			"      this->val=val;\r",
			"      this->next=NULL;\r",
			"      this->prev=NULL;\r",
			"   }\r",
			"};"
		],
		"description": "doubly linked list node"
	},
	"tree node": {
		"prefix": "/tree",
		"body": [
			"class Node{\r",
			"   public:\r",
			"      int val;\r",
			"      Node *right;\r",
			"      Node *left;\r",
			"   Node(int val){\r",
			"      this->val=val;\r",
			"      this->right=NULL;\r",
			"      this->left=NULL;\r",
			"   }\r",
			"};"
		],
		"description": "tree node"
	},
	"begin()": {
		"prefix": ".be",
		"body": [
			".begin()$0"
		],
		"description": "begin()"
	},
	"end()": {
		"prefix": ".end",
		"body": [
			".end()$0"
		],
		"description": "end()"
	},
	"v.begin(),v.end()": {
		"prefix": "/all",
		"body": [
			"${1:v}.begin(),${1:v}.end()$0"
		],
		"description": "v.begin(),v.end() [change v]"
	},
	"push_back(x);": {
		"prefix": ".pb",
		"body": [
			".push_back(${1:x});$0"
		],
		"description": "push_back(x);"
	},
	"pop_back();": {
		"prefix": ".pop",
		"body": [
			".pop_back();$0"
		],
		"description": "pop_back();"
	},
	".size()": {
		"prefix": ".sz",
		"body": [
			".size()$0"
		],
		"description": "size()"
	},
	"first": {
		"prefix": ".fi",
		"body": [
			".first$0"
		],
		"description": "first"
	},
	"second": {
		"prefix": ".se",
		"body": [
			".second$0"
		],
		"description": "second"
	},
	"insert(x);": {
		"prefix": ".in",
		"body": [
			".insert(${1:x});$0"
		],
		"description": "insert(x);"
	},
	"sort vector": {
		"prefix": "/sort",
		"body": [
			"sort(${1:v}.begin(),${1:v}.end());$0"
		],
		"description": "sort vector"
	},
	"sort vector (descending)": {
		"prefix": "/sorttt",
		"body": [
			"sort(${1:v}.begin(),${1:v}.end(),greater<int>());$0"
		],
		"description": "sort vector (descending)"
	},
	"class name(){}": {
		"prefix": "/class",
		"body": [
			"class ${1:name}{\r",
			"\t$0\r",
			"};"
		],
		"description": "Snippet for class"
	}
}
